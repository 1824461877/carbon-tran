// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	gsfAssetFieldNames          = builder.RawFieldNames(&GsfAsset{})
	gsfAssetRows                = strings.Join(gsfAssetFieldNames, ",")
	gsfAssetRowsExpectAutoSet   = strings.Join(stringx.Remove(gsfAssetFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	gsfAssetRowsWithPlaceHolder = strings.Join(stringx.Remove(gsfAssetFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGsfAssetIdPrefix = "cache:gsfAsset:id:"
)

type (
	gsfAssetModel interface {
		Insert(ctx context.Context, data *GsfAsset) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*GsfAsset, error)
		Update(ctx context.Context, data *GsfAsset) error
		Delete(ctx context.Context, id int64) error
	}

	defaultGsfAssetModel struct {
		sqlc.CachedConn
		table string
	}

	GsfAsset struct {
		Id      int64  `db:"id"`
		Account string `db:"account"` // 账户
		Details string `db:"details"` // Project Details
		GsfId   string `db:"gsf_id"`  // GS ID
		Number  int64  `db:"number"`  // 数量
		Day     int64  `db:"day"`     // 日期
	}
)

func newGsfAssetModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultGsfAssetModel {
	return &defaultGsfAssetModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`gsf_asset`",
	}
}

func (m *defaultGsfAssetModel) Delete(ctx context.Context, id int64) error {
	gsfAssetIdKey := fmt.Sprintf("%s%v", cacheGsfAssetIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, gsfAssetIdKey)
	return err
}

func (m *defaultGsfAssetModel) FindOne(ctx context.Context, id int64) (*GsfAsset, error) {
	gsfAssetIdKey := fmt.Sprintf("%s%v", cacheGsfAssetIdPrefix, id)
	var resp GsfAsset
	err := m.QueryRowCtx(ctx, &resp, gsfAssetIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", gsfAssetRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGsfAssetModel) Insert(ctx context.Context, data *GsfAsset) (sql.Result, error) {
	gsfAssetIdKey := fmt.Sprintf("%s%v", cacheGsfAssetIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, gsfAssetRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Account, data.Details, data.GsfId, data.Number, data.Day)
	}, gsfAssetIdKey)
	return ret, err
}

func (m *defaultGsfAssetModel) Update(ctx context.Context, data *GsfAsset) error {
	gsfAssetIdKey := fmt.Sprintf("%s%v", cacheGsfAssetIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, gsfAssetRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Account, data.Details, data.GsfId, data.Number, data.Day, data.Id)
	}, gsfAssetIdKey)
	return err
}

func (m *defaultGsfAssetModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGsfAssetIdPrefix, primary)
}

func (m *defaultGsfAssetModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", gsfAssetRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultGsfAssetModel) tableName() string {
	return m.table
}
