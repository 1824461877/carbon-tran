// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	exchange "hub/internal/handler/exchange"
	personal "hub/internal/handler/personal"
	user "hub/internal/handler/wallet"
	retirefile "hub/internal/handler/retirefile"
	"hub/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Middleware.AuthJwtMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/ping",
					Handler: pingHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Middleware.AuthJwtMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/exchange/asset_transaction",
					Handler: exchange.AssetExchangeTransactionHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/exchange/get_asset_sell",
					Handler: exchange.GetAssetHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/exchange/asset_list",
				Handler: exchange.GetExchangeAssetListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/retire/:rid",
				Handler: retirefile.GetRetireCertHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Middleware.AuthJwtMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/personal/asset_list",
					Handler: personal.GetPersonalAssetListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/personal/get_retire",
					Handler: personal.GetPersonalAssetRetireHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/personal/retire",
					Handler: personal.PersonalAssetRetireHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/personal/get_sell",
					Handler: personal.GetPersonalAssetSellHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/personal/payment_order",
					Handler: personal.PayOrderPaymentHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/personal/obtain_payment_status",
					Handler: personal.PayOrderPaymentStatusHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/personal/get_personal_transaction_list",
					Handler: personal.GetPersonalTransactionListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/personal/sell",
					Handler: personal.PersonalAssetSellHandler(serverCtx),
				},
			}...,
		),
	)

	// wallet wallet
	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Middleware.WalletJwtMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/user_wallet/info",
					Handler: user.UserWalletInfoHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Middleware.AuthJwtMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/user_wallet/add",
					Handler: user.UserWalletAddHandler(serverCtx),
				},
				//{
				//	Method:  http.MethodPost,
				//	Path:    "/user_wallet/login",
				//	Handler: user.UserWalletLoginHandler(serverCtx),
				//},
				{
					Method:  http.MethodGet,
					Path:    "/user_wallet/list",
					Handler: user.UserWalletListHandler(serverCtx),
				},
			}...
		),
	)
}
