// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	retireFieldNames          = builder.RawFieldNames(&Retire{})
	retireRows                = strings.Join(retireFieldNames, ",")
	retireRowsExpectAutoSet   = strings.Join(stringx.Remove(retireFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	retireRowsWithPlaceHolder = strings.Join(stringx.Remove(retireFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	retireModel interface {
		Insert(ctx context.Context, data *Retire) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Retire, error)
		FindALLByUserId(ctx context.Context, userId string) (*[]Retire, error)
		Update(ctx context.Context, data *Retire) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRetireModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Retire struct {
		Id              int64     `db:"id"`
		RId             string    `db:"r_id"`             // 注销单号ID
		AssId           string    `db:"ass_id"`           // 注销的资产id
		UserId          string    `db:"user_id"`          // 资产注销用户id
		Number          int64     `db:"number"`           // 数量
		Status          int64     `db:"status"`           // 注销状态
		CertificateLink string    `db:"certificate_link"` // 证书访问link
		CreateTime      time.Time `db:"create_time"`      // 注销时间
	}
)

func newRetireModel(conn sqlx.SqlConn) *defaultRetireModel {
	return &defaultRetireModel{
		conn:  conn,
		table: "`retire`",
	}
}

func (m *defaultRetireModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultRetireModel) FindOne(ctx context.Context, id int64) (*Retire, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", retireRows, m.table)
	var resp Retire
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRetireModel) Insert(ctx context.Context, data *Retire) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, retireRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.RId, data.AssId, data.UserId, data.Number, data.Status, data.CertificateLink)
	return ret, err
}


func (m *defaultRetireModel) FindALLByUserId(ctx context.Context, userId string) (*[]Retire, error) {
	query := fmt.Sprintf("select %s from %s where `user_id` = ?", retireRows, m.table)
	var resp []Retire
	err := m.conn.QueryRowsCtx(ctx, &resp, query, userId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRetireModel) Update(ctx context.Context, data *Retire) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, retireRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.RId, data.AssId, data.UserId, data.Number, data.Status, data.CertificateLink, data.Id)
	return err
}

func (m *defaultRetireModel) tableName() string {
	return m.table
}
