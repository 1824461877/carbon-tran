// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: pb/proto/trade.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TradeServer_GetTradeList_FullMethodName   = "/pb.TradeServer/GetTradeList"
	TradeServer_TradeExecution_FullMethodName = "/pb.TradeServer/TradeExecution"
)

// TradeServerClient is the client API for TradeServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TradeServerClient interface {
	GetTradeList(ctx context.Context, in *TradeOrderIdReq, opts ...grpc.CallOption) (*TradeListResp, error)
	TradeExecution(ctx context.Context, in *TradeReq, opts ...grpc.CallOption) (*TradeExecutionResp, error)
}

type tradeServerClient struct {
	cc grpc.ClientConnInterface
}

func NewTradeServerClient(cc grpc.ClientConnInterface) TradeServerClient {
	return &tradeServerClient{cc}
}

func (c *tradeServerClient) GetTradeList(ctx context.Context, in *TradeOrderIdReq, opts ...grpc.CallOption) (*TradeListResp, error) {
	out := new(TradeListResp)
	err := c.cc.Invoke(ctx, TradeServer_GetTradeList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeServerClient) TradeExecution(ctx context.Context, in *TradeReq, opts ...grpc.CallOption) (*TradeExecutionResp, error) {
	out := new(TradeExecutionResp)
	err := c.cc.Invoke(ctx, TradeServer_TradeExecution_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TradeServerServer is the server API for TradeServer service.
// All implementations must embed UnimplementedTradeServerServer
// for forward compatibility
type TradeServerServer interface {
	GetTradeList(context.Context, *TradeOrderIdReq) (*TradeListResp, error)
	TradeExecution(context.Context, *TradeReq) (*TradeExecutionResp, error)
	mustEmbedUnimplementedTradeServerServer()
}

// UnimplementedTradeServerServer must be embedded to have forward compatible implementations.
type UnimplementedTradeServerServer struct {
}

func (UnimplementedTradeServerServer) GetTradeList(context.Context, *TradeOrderIdReq) (*TradeListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTradeList not implemented")
}
func (UnimplementedTradeServerServer) TradeExecution(context.Context, *TradeReq) (*TradeExecutionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradeExecution not implemented")
}
func (UnimplementedTradeServerServer) mustEmbedUnimplementedTradeServerServer() {}

// UnsafeTradeServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TradeServerServer will
// result in compilation errors.
type UnsafeTradeServerServer interface {
	mustEmbedUnimplementedTradeServerServer()
}

func RegisterTradeServerServer(s grpc.ServiceRegistrar, srv TradeServerServer) {
	s.RegisterService(&TradeServer_ServiceDesc, srv)
}

func _TradeServer_GetTradeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradeOrderIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeServerServer).GetTradeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeServer_GetTradeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeServerServer).GetTradeList(ctx, req.(*TradeOrderIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeServer_TradeExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeServerServer).TradeExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeServer_TradeExecution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeServerServer).TradeExecution(ctx, req.(*TradeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TradeServer_ServiceDesc is the grpc.ServiceDesc for TradeServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TradeServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.TradeServer",
	HandlerType: (*TradeServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTradeList",
			Handler:    _TradeServer_GetTradeList_Handler,
		},
		{
			MethodName: "TradeExecution",
			Handler:    _TradeServer_TradeExecution_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/proto/trade.proto",
}
