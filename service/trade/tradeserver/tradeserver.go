// Code generated by goctl. DO NOT EDIT.
// Source: trade.proto

package tradeserver

import (
	"context"

	"trade/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	TradeExecutionResp   = pb.TradeExecutionResp
	TradeListResp        = pb.TradeListResp
	TradeObtainReq       = pb.TradeObtainReq
	TradeOnceResp        = pb.TradeOnceResp
	TradeOrderUpdateReq  = pb.TradeOrderUpdateReq
	TradeOrderUpdateResp = pb.TradeOrderUpdateResp
	TradeReq             = pb.TradeReq

	TradeServer interface {
		GetTradeObtainList(ctx context.Context, in *TradeObtainReq, opts ...grpc.CallOption) (*TradeListResp, error)
		TradeExecution(ctx context.Context, in *TradeReq, opts ...grpc.CallOption) (*TradeExecutionResp, error)
		TradeOrderUpdate(ctx context.Context, in *TradeOrderUpdateReq, opts ...grpc.CallOption) (*TradeOrderUpdateResp, error)
	}

	defaultTradeServer struct {
		cli zrpc.Client
	}
)

func NewTradeServer(cli zrpc.Client) TradeServer {
	return &defaultTradeServer{
		cli: cli,
	}
}

func (m *defaultTradeServer) GetTradeObtainList(ctx context.Context, in *TradeObtainReq, opts ...grpc.CallOption) (*TradeListResp, error) {
	client := pb.NewTradeServerClient(m.cli.Conn())
	return client.GetTradeObtainList(ctx, in, opts...)
}

func (m *defaultTradeServer) TradeExecution(ctx context.Context, in *TradeReq, opts ...grpc.CallOption) (*TradeExecutionResp, error) {
	client := pb.NewTradeServerClient(m.cli.Conn())
	return client.TradeExecution(ctx, in, opts...)
}

func (m *defaultTradeServer) TradeOrderUpdate(ctx context.Context, in *TradeOrderUpdateReq, opts ...grpc.CallOption) (*TradeOrderUpdateResp, error) {
	client := pb.NewTradeServerClient(m.cli.Conn())
	return client.TradeOrderUpdate(ctx, in, opts...)
}
