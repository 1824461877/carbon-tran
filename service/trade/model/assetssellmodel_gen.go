// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	assetsSellFieldNames          = builder.RawFieldNames(&AssetsSell{})
	assetsSellRows                = strings.Join(assetsSellFieldNames, ",")
	assetsSellRowsExpectAutoSet   = strings.Join(stringx.Remove(assetsSellFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	assetsSellRowsWithPlaceHolder = strings.Join(stringx.Remove(assetsSellFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	assetsSellModel interface {
		Insert(ctx context.Context, data *AssetsSell) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AssetsSell, error)
		FindOneByExId(ctx context.Context, exid string) (*AssetsSell, error)
		FindOneByAssId(ctx context.Context, ass_id string) (*AssetsSell, error)
		FindAllByUID(ctx context.Context, uid string) (*[]AssetsSell, error)
		Update(ctx context.Context, data *AssetsSell) error
		UpdateNumber(ctx context.Context, data *AssetsSell) error
		FindAll(ctx context.Context) (*[]AssetsSell, error)
		Delete(ctx context.Context, ass_id string) error
		DeleteExID(ctx context.Context, ex_id string) error
	}

	defaultAssetsSellModel struct {
		conn  sqlx.SqlConn
		table string
	}

	AssetsSell struct {
		Id                 int64     `db:"id" json:"id"`
		ExId               string    `db:"ex_id" json:"ex_id"`                // 交易单号
		AssId              string    `db:"ass_id" json:"ass_id"`               // 资产编号
		CollectionWalletId string    `db:"collection_wallet_id" json:"collection_wallet_id"` // 收款的钱包 id
		UserId             string    `db:"user_id" json:"user_id"`              // 资产所属用户
		Source             string    `db:"source" json:"source"`               // 来源资产
		Amount             float64   `db:"amount" json:"amount"`               // number(数量)/amount(金额)
		Number             int64     `db:"number" json:"number"`               // 数量
		CreateTime         time.Time `db:"create_time" json:"create_time"`          // 交易创建时间
		EndTime            time.Time `db:"end_time" json:"end_time"`             // 交易结束时间
	}
)

func newAssetsSellModel(conn sqlx.SqlConn) *defaultAssetsSellModel {
	return &defaultAssetsSellModel{
		conn:  conn,
		table: "`assets_sell`",
	}
}

func (m *defaultAssetsSellModel) Delete(ctx context.Context, ass_id string) error {
	query := fmt.Sprintf("delete from %s where `ass_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, ass_id)
	return err
}

func (m *defaultAssetsSellModel) DeleteExID(ctx context.Context, ex_id string) error {
	query := fmt.Sprintf("delete from %s where `ex_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, ex_id)
	return err
}

func (m *defaultAssetsSellModel) FindOne(ctx context.Context, id int64) (*AssetsSell, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", assetsSellRows, m.table)
	var resp AssetsSell
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAssetsSellModel) FindOneByExId(ctx context.Context, exid string) (*AssetsSell, error) {
	query := fmt.Sprintf("select %s from %s where `ex_id` = ? limit 1", assetsSellRows, m.table)
	var resp AssetsSell
	err := m.conn.QueryRowCtx(ctx, &resp, query, exid)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAssetsSellModel) FindOneByAssId(ctx context.Context, ass_id string) (*AssetsSell, error) {
	query := fmt.Sprintf("select %s from %s where `ass_id` = ? limit 1", assetsSellRows, m.table)
	var resp AssetsSell
	err := m.conn.QueryRowCtx(ctx, &resp, query, ass_id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAssetsSellModel) FindAllByUID(ctx context.Context, uid string) (*[]AssetsSell, error) {
	query := fmt.Sprintf("select %s from %s where `user_id` = ?", assetsSellRows, m.table)
	var resp []AssetsSell
	err := m.conn.QueryRowsCtx(ctx, &resp, query, uid)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAssetsSellModel) FindAll(ctx context.Context) (*[]AssetsSell, error) {
	query := fmt.Sprintf("select %s from %s", assetsSellRows, m.table)
	var resp []AssetsSell
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAssetsSellModel) Insert(ctx context.Context, data *AssetsSell) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, assetsSellRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ExId, data.AssId, data.CollectionWalletId, data.UserId, data.Source, data.Amount, data.Number, data.EndTime)
	return ret, err
}

func (m *defaultAssetsSellModel) Update(ctx context.Context, data *AssetsSell) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, assetsSellRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ExId, data.AssId, data.CollectionWalletId, data.UserId, data.Source, data.Amount, data.Number, data.EndTime, data.Id)
	return err
}

func (m *defaultAssetsSellModel) UpdateNumber(ctx context.Context, data *AssetsSell) error {
	query := fmt.Sprintf("update %s set `number`= `number` - ? where `ex_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, data.Number, data.ExId)
	return err
}

func (m *defaultAssetsSellModel) tableName() string {
	return m.table
}
