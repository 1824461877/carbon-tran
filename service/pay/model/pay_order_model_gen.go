// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	payOrderFieldNames          = builder.RawFieldNames(&PayOrder{})
	payOrderRows                = strings.Join(payOrderFieldNames, ",")
	payOrderRowsExpectAutoSet   = strings.Join(stringx.Remove(payOrderFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	payOrderRowsWithPlaceHolder = strings.Join(stringx.Remove(payOrderFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cachePayOrderIdPrefix         = "cache:payOrder:id:"
	cachePayOrderPayOrderIdPrefix = "cache:payOrder:payOrderId:"
)

type (
	payOrderModel interface {
		Insert(ctx context.Context, data *PayOrder) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*PayOrder, error)
		FindOneByPayOrderId(ctx context.Context, payOrderId string) (*PayOrder, error)
		FindAllByPayOrderId(ctx context.Context) (*[]PayOrder, error)
		Update(ctx context.Context, data *PayOrder) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPayOrderModel struct {
		sqlc.CachedConn
		table string
	}

	PayOrder struct {
		Id            int64     `db:"id"`
		PayOrderId    string    `db:"pay_order_id"` // 支付订单id
		PayId         string    `db:"pay_id"`       // 第三方支付的订单号
		Initiator     string    `db:"initiator"`    // 支付的发起者
		Recipient     string    `db:"recipient"`    // 支付接受者
		PayStatus     int64     `db:"pay_status"`   // 支付状态
		PayAmount     int64     `db:"pay_amount"`   // 支付金额
		InitiatorTime time.Time `db:"initiator_time"`
		FinishTime    time.Time `db:"finish_time"`
	}
)

func newPayOrderModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultPayOrderModel {
	return &defaultPayOrderModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`pay_order`",
	}
}

func (m *defaultPayOrderModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	payOrderIdKey := fmt.Sprintf("%s%v", cachePayOrderIdPrefix, id)
	payOrderPayOrderIdKey := fmt.Sprintf("%s%v", cachePayOrderPayOrderIdPrefix, data.PayOrderId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, payOrderIdKey, payOrderPayOrderIdKey)
	return err
}

func (m *defaultPayOrderModel) FindOne(ctx context.Context, id int64) (*PayOrder, error) {
	payOrderIdKey := fmt.Sprintf("%s%v", cachePayOrderIdPrefix, id)
	var resp PayOrder
	err := m.QueryRowCtx(ctx, &resp, payOrderIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", payOrderRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPayOrderModel) FindAllByPayOrderId(ctx context.Context) (*[]PayOrder, error) {
	var resp []PayOrder
	query := fmt.Sprintf("select %s from %s", payOrderRows, m.table)
	err := m.QueryRowsNoCacheCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}


func (m *defaultPayOrderModel) FindOneByPayOrderId(ctx context.Context, payOrderId string) (*PayOrder, error) {
	payOrderPayOrderIdKey := fmt.Sprintf("%s%v", cachePayOrderPayOrderIdPrefix, payOrderId)
	var resp PayOrder
	err := m.QueryRowIndexCtx(ctx, &resp, payOrderPayOrderIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `pay_order_id` = ? limit 1", payOrderRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, payOrderId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPayOrderModel) Insert(ctx context.Context, data *PayOrder) (sql.Result, error) {
	payOrderIdKey := fmt.Sprintf("%s%v", cachePayOrderIdPrefix, data.Id)
	payOrderPayOrderIdKey := fmt.Sprintf("%s%v", cachePayOrderPayOrderIdPrefix, data.PayOrderId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, payOrderRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.PayOrderId, data.PayId, data.Initiator, data.Recipient, data.PayStatus, data.PayAmount, data.InitiatorTime, data.FinishTime)
	}, payOrderIdKey, payOrderPayOrderIdKey)
	return ret, err
}

func (m *defaultPayOrderModel) Update(ctx context.Context, newData *PayOrder) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	payOrderIdKey := fmt.Sprintf("%s%v", cachePayOrderIdPrefix, data.Id)
	payOrderPayOrderIdKey := fmt.Sprintf("%s%v", cachePayOrderPayOrderIdPrefix, data.PayOrderId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, payOrderRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.PayOrderId, newData.PayId, newData.Initiator, newData.Recipient, newData.PayStatus, newData.PayAmount, newData.InitiatorTime, newData.FinishTime, newData.Id)
	}, payOrderIdKey, payOrderPayOrderIdKey)
	return err
}

func (m *defaultPayOrderModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cachePayOrderIdPrefix, primary)
}

func (m *defaultPayOrderModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", payOrderRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultPayOrderModel) tableName() string {
	return m.table
}
