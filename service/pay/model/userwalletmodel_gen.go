// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userWalletFieldNames          = builder.RawFieldNames(&UserWallet{})
	userWalletRows                = strings.Join(userWalletFieldNames, ",")
	userWalletRowsExpectAutoSet   = strings.Join(stringx.Remove(userWalletFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userWalletRowsWithPlaceHolder = strings.Join(stringx.Remove(userWalletFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	userWalletModel interface {
		Insert(ctx context.Context, data *UserWallet) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserWallet, error)
		FindOneByWalletId(ctx context.Context, walletId string) (*UserWallet, error)
		FindAllByUserId(ctx context.Context, userId string) (*[]UserWallet, error)
		Update(ctx context.Context, data *UserWallet) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserWalletModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserWallet struct {
		Id         int64     `db:"id"`
		WalletId   string    `db:"wallet_id"` // 钱包ID
		UserId     string    `db:"user_id"`   // 钱包所属用户ID
		Name       string    `db:"name"`      // 钱包名
		Password   string    `db:"password"`  // 用户密码
		Amount     float64   `db:"amount"`    // 钱包余额
		Salt       string    `db:"salt"`      // 密码salt
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
	}
)

func newUserWalletModel(conn sqlx.SqlConn) *defaultUserWalletModel {
	return &defaultUserWalletModel{
		conn:  conn,
		table: "`user_wallet`",
	}
}

func (m *defaultUserWalletModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserWalletModel) FindOne(ctx context.Context, id int64) (*UserWallet, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userWalletRows, m.table)
	var resp UserWallet
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserWalletModel) FindOneByWalletId(ctx context.Context, walletId string) (*UserWallet, error) {
	var resp UserWallet
	query := fmt.Sprintf("select %s from %s where `wallet_id` = ? limit 1", userWalletRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, walletId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserWalletModel) FindAllByUserId(ctx context.Context, userId string) (*[]UserWallet, error) {
	var resp []UserWallet
	query := fmt.Sprintf("select %s from %s where `user_id` = ?", userWalletRows, m.table)
	err := m.conn.QueryRowsCtx(ctx, &resp, query, userId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserWalletModel) Insert(ctx context.Context, data *UserWallet) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, userWalletRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.WalletId, data.UserId, data.Name, data.Password, data.Amount, data.Salt)
	return ret, err
}

func (m *defaultUserWalletModel) Update(ctx context.Context, newData *UserWallet) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userWalletRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.WalletId, newData.UserId, newData.Name, newData.Password, newData.Amount, newData.Salt, newData.Id)
	return err
}

func (m *defaultUserWalletModel) tableName() string {
	return m.table
}
