// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: pb/proto/pay.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PayServer_GetPayList_FullMethodName   = "/pb.PayServer/GetPayList"
	PayServer_PayExecution_FullMethodName = "/pb.PayServer/PayExecution"
)

// PayServerClient is the client API for PayServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PayServerClient interface {
	GetPayList(ctx context.Context, in *PayOnceReq, opts ...grpc.CallOption) (*PayListResp, error)
	PayExecution(ctx context.Context, in *PayReq, opts ...grpc.CallOption) (*PayExecutionResp, error)
}

type payServerClient struct {
	cc grpc.ClientConnInterface
}

func NewPayServerClient(cc grpc.ClientConnInterface) PayServerClient {
	return &payServerClient{cc}
}

func (c *payServerClient) GetPayList(ctx context.Context, in *PayOnceReq, opts ...grpc.CallOption) (*PayListResp, error) {
	out := new(PayListResp)
	err := c.cc.Invoke(ctx, PayServer_GetPayList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payServerClient) PayExecution(ctx context.Context, in *PayReq, opts ...grpc.CallOption) (*PayExecutionResp, error) {
	out := new(PayExecutionResp)
	err := c.cc.Invoke(ctx, PayServer_PayExecution_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PayServerServer is the server API for PayServer service.
// All implementations must embed UnimplementedPayServerServer
// for forward compatibility
type PayServerServer interface {
	GetPayList(context.Context, *PayOnceReq) (*PayListResp, error)
	PayExecution(context.Context, *PayReq) (*PayExecutionResp, error)
	mustEmbedUnimplementedPayServerServer()
}

// UnimplementedPayServerServer must be embedded to have forward compatible implementations.
type UnimplementedPayServerServer struct {
}

func (UnimplementedPayServerServer) GetPayList(context.Context, *PayOnceReq) (*PayListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayList not implemented")
}
func (UnimplementedPayServerServer) PayExecution(context.Context, *PayReq) (*PayExecutionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayExecution not implemented")
}
func (UnimplementedPayServerServer) mustEmbedUnimplementedPayServerServer() {}

// UnsafePayServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PayServerServer will
// result in compilation errors.
type UnsafePayServerServer interface {
	mustEmbedUnimplementedPayServerServer()
}

func RegisterPayServerServer(s grpc.ServiceRegistrar, srv PayServerServer) {
	s.RegisterService(&PayServer_ServiceDesc, srv)
}

func _PayServer_GetPayList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayOnceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServerServer).GetPayList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayServer_GetPayList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServerServer).GetPayList(ctx, req.(*PayOnceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayServer_PayExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServerServer).PayExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayServer_PayExecution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServerServer).PayExecution(ctx, req.(*PayReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PayServer_ServiceDesc is the grpc.ServiceDesc for PayServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PayServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.PayServer",
	HandlerType: (*PayServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPayList",
			Handler:    _PayServer_GetPayList_Handler,
		},
		{
			MethodName: "PayExecution",
			Handler:    _PayServer_PayExecution_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/proto/pay.proto",
}
